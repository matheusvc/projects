#!/usr/bin/env python
import time
import serial
import tkinter as tk
from tkinter import ttk
import threading, queue

ser = serial.Serial(
              
    port='/dev/ttyUSB0',
    baudrate = 19200,
    parity=serial.PARITY_NONE,
    stopbits=serial.STOPBITS_ONE,
    bytesize=serial.EIGHTBITS,
    timeout=1
    )

def signal_checker():
    while True:
        x = ser.readline()
        y = x.rstrip()
        z = y.decode('utf-8')
        print(z)
        ser.write(str.encode('AT+CSQ\r'))
        time.sleep(20)
        if (z.startswith("+CSQ")):
            a = int(z[5])
            if a >= 3:
                print('Qualidade do sinal', z[5], 'é suficiente')
                my_stopper.set()
                myq.put('signalup')
                print('Event Set By Signal Checker')
                time.sleep(20)
                myq.queue.clear()
            else:
                print('Buscando Sinal...')
                time.sleep(0.5)
                
                
                
                
def receiver():
    my_stopper.wait(10)
    check = myq.get()
    if check == 'signalup':
        print('Receiver Started')
        while True:
            q = ser.readline()
            w = q.rstrip()
            e = w.decode('utf-8')
            if (e == 'SBDRING'):
                print ('Ring Alert recebido')
                ser.write(str.encode('AT+SBDIX\r'))
                time.sleep(5)
                ser.write(str.encode('AT+SBDRT\r'))
                time.sleep(2)
                assist_var = 0
                lista = []
                while len(lista) < 12:
                    u = ser.readline()
                    i = u.rstrip()
                    o = i.decode('utf-8')
                    if len(o) > 1 :
                        lista.append(o)
                        assist_var = assist_var + 1
                        #print(lista)
                        #print('assist_var = ', assist_var)
                    if assist_var == 7:
                        print('Você recebeu :', lista[5])

                
my_stopper = threading.Event()
lock = threading.Lock()
myq = queue.Queue()


t1 = threading.Thread(target = signal_checker)
t2 = threading.Thread(target = receiver)

t1.start()

t2.start()
t2.join()




ERROR:
Exception in thread Thread-5:
Traceback (most recent call last):
  File "/home/anaconda3/lib/python3.7/site-packages/serial/serialposix.py", line 501, in read
    'device reports readiness to read but returned no data '
serial.serialutil.SerialException: device reports readiness to read but returned no data (device disconnected or multiple access on port?)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/anaconda3/lib/python3.7/threading.py", line 917, in _bootstrap_inner
    self.run()
  File "/home/anaconda3/lib/python3.7/threading.py", line 865, in run
    self._target(*self._args, **self._kwargs)
  File "<ipython-input-1-2509e5eda183>", line 48, in receiver
    q = ser.readline()
  File "/home/anaconda3/lib/python3.7/site-packages/serial/serialposix.py", line 509, in read
    raise SerialException('read failed: {}'.format(e))
serial.serialutil.SerialException: read failed: device reports readiness to read but returned no data (device disconnected or multiple access on port?)
