import time
import serial
import tkinter as tk
from tkinter import ttk
import time
import datetime as dt
import random
from _thread import *
import threading

    
def enough_signal_write(con, evt):
    
    event_set = evt.wait(.1)
    
    if event_set:
        
        print('Evento = True. Dentro da Thread com evento')
        thing = str(round(random.uniform(1,3), 15))
        if len(thing) < 17:
            thing = thing + str(6)
        hora = str(dt.datetime.now().strftime('%H:%M:%S'))
        pack = thing + ',' + hora
        print('Pack = ', pack)
            
        while evt.is_set() == True:
            v = con.readline()
            b = v.rstrip()
            n = b.decode('utf-8')
            if n != '':
                with print_lock:
                    print(n)
            with lock:
                con.write(str.encode('AT+SBDWT\r'))
                time.sleep(7)
                con.write(str.encode(pack))
                ser.write(str.encode('\r'))
                time.sleep(5)
                con.write(str.encode('AT+SBDIX\r'))
                time.sleep(5)
                evt.clear()
    
def read_mt_msg(con, evt):
    
    global ringalert
    
    eventread_set = evt.wait(.1)
    if eventread_set:
        
        while evt.is_set() == True:
            a = con.readline()
            bc = a.rstrip()
            bd = bc.decode('utf-8')
            if bd != '':
                with print_lock:
                    print(bd)
                
        with print_lock:
            print('Iniciando leitura MT')
        ser.write(str.encode('AT+SBDIX\r'))
        time.sleep(7)
        ser.write(str.encode('AT+SBDRT\r'))
        time.sleep(3)
        
        with ringal_lock:
            ringalert -= 1
        with lock:
            evt.clear()
        
        
def data_handle(dado, evt, evt1, con):
    if len(dado):
        with print_lock:
            if evt.is_set() == False:
                print('Data Handled : ', dado)
            
        if (dado.startswith("+CSQ")):
            signal = int(dado[5])
            
            if signal >= 3:
                evt.set()
                evt.wait(5)
                thread1 = threading.Thread(target = enough_signal_write, args = (con, evt))
                thread1.start()
                thread1.join()
            else:
                with print_lock:
                    print("Buscando Sinal...")
                    
        elif (dado == 'SBDRING'):
            with ringal_lock:
                ringalert += 1
            with print_lock:
                print("Ring Alert Recebido ! ringalert =", ringalert)
            with lock:
                evt1.set()
            evt1.wait(5)
            thread2 = threading.Thread(target = read_mt_msg, args = (con, evt1))
            thread2.start()
    
        
def read_all_time(con, evt, evt1):
    
    with print_lock:
        print('Inside Read All Time')
        
    while True:
        a = con.readline()
        b = a.rstrip()
        c = b.decode('utf-8')
        data_handle(c, evt, evt1, con)
        
            

def send_atcsq(con, evt):
    
    with print_lock:
        print('Inside Send ATCSQ!')
        
    while True:
        while evt.is_set() == False:
            with lock:
                con.write(str.encode('AT+CSQ\r'))
            time.sleep(9)

               
            
if __name__ == '__main__':
    
    global ringalert
    
    event = threading.Event()
    event_read = threading.Event()
    
    lock = threading.Lock()
    print_lock = threading.Lock()
    ringal_lock = threading.Lock()
    
    ringalert = 0
    
    
    ser = serial.Serial(
              
    port='/dev/ttyUSB0',
    baudrate = 19200,
    parity=serial.PARITY_NONE,
    stopbits=serial.STOPBITS_ONE,
    bytesize=serial.EIGHTBITS,
    timeout=1
    )
    
    
    thread = threading.Thread(target = read_all_time, args = (ser, event, event_read))
    thread.start()
    threadd = threading.Thread(target = send_atcsq, args = (ser, event))
    threadd.start()
